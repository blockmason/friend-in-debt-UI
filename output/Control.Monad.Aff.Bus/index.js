// Generated by purs version 0.11.5
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Aff_AVar = require("../Control.Monad.Aff.AVar");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Monoid = require("../Data.Monoid");
var Data_Tuple = require("../Data.Tuple");
var Prelude = require("../Prelude");
var Bus = (function () {
    function Bus(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Bus.create = function (value0) {
        return function (value1) {
            return new Bus(value0, value1);
        };
    };
    return Bus;
})();
var write = function (a) {
    return function (v) {
        return Control_Monad_Aff_AVar.putVar(v.value0)(a);
    };
};
var split = function (v) {
    return new Data_Tuple.Tuple(new Bus(v.value0, v.value1), new Bus(v.value0, v.value1));
};
var read$prime = function (v) {
    return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v1) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.modifyVar(function (v2) {
            return new Data_List_Types.Cons(v1, v2);
        })(v.value1))(function () {
            return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1);
        });
    });
};
var read = Control_Bind.composeKleisliFlipped(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar)(read$prime);
var make = Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v) {
    return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar["makeVar'"](Data_Monoid.mempty(Data_List_Types.monoidList)))(function (v1) {
        return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Control_Monad_Rec_Class.forever(Control_Monad_Aff.monadRecAff)(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(v))(function (v2) {
            return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(v1))(function (v3) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(v1)(Data_Monoid.mempty(Data_List_Types.monoidList)))(function () {
                    return Data_Foldable.sequence_(Control_Monad_Aff.applicativeAff)(Data_List_Types.foldableList)(Data_Foldable.foldl(Data_List_Types.foldableList)(function (xs) {
                        return function (a) {
                            return new Data_List_Types.Cons(Control_Monad_Aff_AVar.putVar(a)(v2), xs);
                        };
                    })(Data_Monoid.mempty(Data_List_Types.monoidList))(v3));
                });
            });
        }))))(function (v2) {
            return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Bus(v, v1));
        });
    });
});
var kill = function (err) {
    return function (v) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.killVar(v.value0)(err))(function () {
            return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(v.value1))(function (v1) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.killVar(v.value1)(err))(function () {
                    return Data_Foldable.traverse_(Control_Monad_Aff.applicativeAff)(Data_List_Types.foldableList)(Data_Function.flip(Control_Monad_Aff_AVar.killVar)(err))(v1);
                });
            });
        });
    };
};
module.exports = {
    kill: kill, 
    make: make, 
    read: read, 
    "read'": read$prime, 
    split: split, 
    write: write
};
