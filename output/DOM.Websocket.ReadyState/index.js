// Generated by purs version 0.11.5
"use strict";
var Data_Bounded = require("../Data.Bounded");
var Data_Enum = require("../Data.Enum");
var Data_Eq = require("../Data.Eq");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Connecting = (function () {
    function Connecting() {

    };
    Connecting.value = new Connecting();
    return Connecting;
})();
var Open = (function () {
    function Open() {

    };
    Open.value = new Open();
    return Open;
})();
var Closing = (function () {
    function Closing() {

    };
    Closing.value = new Closing();
    return Closing;
})();
var Closed = (function () {
    function Closed() {

    };
    Closed.value = new Closed();
    return Closed;
})();
var toEnumReadyState = function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(Connecting.value);
    };
    if (v === 1) {
        return new Data_Maybe.Just(Open.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(Closing.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(Closed.value);
    };
    return Data_Maybe.Nothing.value;
};
var showReadyState = new Data_Show.Show(function (v) {
    if (v instanceof Connecting) {
        return "Connecting";
    };
    if (v instanceof Open) {
        return "Open";
    };
    if (v instanceof Closing) {
        return "Closing";
    };
    if (v instanceof Closed) {
        return "Closed";
    };
    throw new Error("Failed pattern match at DOM.Websocket.ReadyState line 30, column 3 - line 31, column 3: " + [ v.constructor.name ]);
});
var fromEnumReadyState = function (v) {
    if (v instanceof Connecting) {
        return 0;
    };
    if (v instanceof Open) {
        return 1;
    };
    if (v instanceof Closing) {
        return 2;
    };
    if (v instanceof Closed) {
        return 3;
    };
    throw new Error("Failed pattern match at DOM.Websocket.ReadyState line 46, column 3 - line 50, column 15: " + [ v.constructor.name ]);
};
var eqReadyState = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Connecting && y instanceof Connecting) {
            return true;
        };
        if (x instanceof Open && y instanceof Open) {
            return true;
        };
        if (x instanceof Closing && y instanceof Closing) {
            return true;
        };
        if (x instanceof Closed && y instanceof Closed) {
            return true;
        };
        return false;
    };
});
var ordReadyState = new Data_Ord.Ord(function () {
    return eqReadyState;
}, function (x) {
    return function (y) {
        if (x instanceof Connecting && y instanceof Connecting) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Connecting) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Connecting) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Open && y instanceof Open) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Open) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Open) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Closing && y instanceof Closing) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Closing) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Closing) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Closed && y instanceof Closed) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at DOM.Websocket.ReadyState line 14, column 1 - line 14, column 48: " + [ x.constructor.name, y.constructor.name ]);
    };
});
var enumReadyState = new Data_Enum.Enum(function () {
    return ordReadyState;
}, Data_Enum.defaultPred(toEnumReadyState)(fromEnumReadyState), Data_Enum.defaultSucc(toEnumReadyState)(fromEnumReadyState));
var boundedReadyState = new Data_Bounded.Bounded(function () {
    return ordReadyState;
}, Connecting.value, Closed.value);
var boundedEnumReadyState = new Data_Enum.BoundedEnum(function () {
    return boundedReadyState;
}, function () {
    return enumReadyState;
}, 4, fromEnumReadyState, toEnumReadyState);
module.exports = {
    Connecting: Connecting, 
    Open: Open, 
    Closing: Closing, 
    Closed: Closed, 
    fromEnumReadyState: fromEnumReadyState, 
    toEnumReadyState: toEnumReadyState, 
    eqReadyState: eqReadyState, 
    ordReadyState: ordReadyState, 
    boundedReadyState: boundedReadyState, 
    enumReadyState: enumReadyState, 
    boundedEnumReadyState: boundedEnumReadyState, 
    showReadyState: showReadyState
};
