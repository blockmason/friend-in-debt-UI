// Generated by purs version 0.11.5
"use strict";
var $foreign = require("./foreign");
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Class = require("../Control.Monad.Eff.Class");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array = require("../Data.Array");
var Data_Boolean = require("../Data.Boolean");
var Data_Either = require("../Data.Either");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Format_Money = require("../Data.Format.Money");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Int = require("../Data.Int");
var Data_Map = require("../Data.Map");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Unit = require("../Data.Unit");
var $$Math = require("../Math");
var Network_Eth_Metamask = require("../Network.Eth.Metamask");
var Prelude = require("../Prelude");
var Money = function (x) {
    return x;
};
var NoMetamask = (function () {
    function NoMetamask() {

    };
    NoMetamask.value = new NoMetamask();
    return NoMetamask;
})();
var Positive = (function () {
    function Positive() {

    };
    Positive.value = new Positive();
    return Positive;
})();
var Negative = (function () {
    function Negative() {

    };
    Negative.value = new Negative();
    return Negative;
})();
var Zero = (function () {
    function Zero() {

    };
    Zero.value = new Zero();
    return Zero;
})();
var UserAddress = function (x) {
    return x;
};
var FriendDebt = function (x) {
    return x;
};
var showUserAddress = new Data_Show.Show(function (v) {
    return v;
});
var showMoney = new Data_Show.Show(function (v) {
    return (function () {
        var $55 = v < Data_Int.toNumber(0);
        if ($55) {
            return "-";
        };
        return "";
    })() + Data_Format_Money.formatDollar($$Math.abs(v));
});
var showFriendDebt = new Data_Show.Show(function (v) {
    return Data_Show.show(showMoney)(v.debt) + (": " + Data_Show.show(showUserAddress)(v.friend));
});
var showError = new Data_Show.Show(function (v) {
    return "NoMetamask: Metamask not logged in.";
});
var setDebt = function (v) {
    return function (m) {
        return {
            friend: v.friend, 
            debt: m
        };
    };
};
var newDebt = function (f) {
    return function (d) {
        return {
            friend: f, 
            debt: d
        };
    };
};
var mkNegative = function (v) {
    return Money(v * -1.0);
};
var getUa = function (v) {
    return v;
};
var getName = function (v) {
    return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.makeAff(function (err) {
        return function (succ) {
            return $foreign.getNameImpl(succ)(v);
        };
    }))(function (v1) {
        var $64 = v1 === "";
        if ($64) {
            return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Maybe.Nothing.value);
        };
        return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Maybe.Just(v1));
    });
};
var getFriendAddr = function (v) {
    return v.friend;
};
var getDebtOrPending = function (lookupFnImpl) {
    return function (v) {
        return function (v1) {
            return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.makeAff(function (err) {
                return function (succ) {
                    return lookupFnImpl(succ)(v)(v1);
                };
            }))(function (v2) {
                return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(FriendDebt({
                    friend: v1, 
                    debt: v2
                }));
            });
        };
    };
};
var getDebt = function (v) {
    return v.debt;
};
var friends = function (v) {
    return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.makeAff(function (error) {
        return function (success) {
            return $foreign.friendsImpl(success)(v);
        };
    }))(function (v1) {
        return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Functor.map(Data_Functor.functorArray)(UserAddress)(v1));
    });
};
var friendDebtZero = function (ua) {
    return {
        friend: ua, 
        debt: 0.0
    };
};
var flipDebt = function (v) {
    return {
        friend: v.friend, 
        debt: mkNegative(v.debt)
    };
};
var eqUserAddress = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return v === v1;
    };
});
var ordUserAddress = new Data_Ord.Ord(function () {
    return eqUserAddress;
}, function (v) {
    return function (v1) {
        return Data_String.localeCompare(v)(v1);
    };
});
var eqMoney = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return v === v1;
    };
});
var ordMoney = new Data_Ord.Ord(function () {
    return eqMoney;
}, function (v) {
    return function (v1) {
        return Data_Ord.compare(Data_Ord.ordNumber)(v)(v1);
    };
});
var eqFriendDebt = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return Data_Eq.eq(eqUserAddress)(v.friend)(v1.friend) && Data_Eq.eq(eqMoney)(v.debt)(v1.debt);
    };
});
var checkAndInit = function __do() {
    var v = Data_Functor.map(Control_Monad_Eff.functorEff)(Network_Eth_Metamask.loggedIn)(Network_Eth_Metamask.checkStatus)();
    if (v) {
        return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.Right.create)($foreign.initImpl("dummy"))();
    };
    return new Data_Either.Left(NoMetamask.value);
};
var createFriendship = function (v) {
    return function __do() {
        var v1 = checkAndInit();
        if (v1 instanceof Data_Either.Left) {
            return new Data_Either.Left(v1.value0);
        };
        if (v1 instanceof Data_Either.Right) {
            $foreign.createFriendshipImpl(v)();
            return new Data_Either.Right(Data_Unit.unit);
        };
        throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 229, column 3 - line 233, column 24: " + [ v1.constructor.name ]);
    };
};
var currentUser = function __do() {
    var v = checkAndInit();
    if (v instanceof Data_Either.Left) {
        return new Data_Either.Left(v.value0);
    };
    if (v instanceof Data_Either.Right) {
        var v1 = $foreign.currentUserImpl("dummy")();
        return Data_Either.Right.create(v1);
    };
    throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 151, column 3 - line 155, column 37: " + [ v.constructor.name ]);
};
var currentUserFriends = Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(currentUser))(function (v) {
    if (v instanceof Data_Either.Left) {
        return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Either.Left(v.value0));
    };
    if (v instanceof Data_Either.Right) {
        return Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Either.Right.create)(friends(v.value0));
    };
    throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 175, column 3 - line 177, column 41: " + [ v.constructor.name ]);
});
var getCurrentUserName = Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(currentUser))(function (v) {
    if (v instanceof Data_Either.Left) {
        return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Either.Left(v.value0));
    };
    if (v instanceof Data_Either.Right) {
        return Control_Bind.bind(Control_Monad_Aff.bindAff)(getName(v.value0))(function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Either.Right.create(new Data_Either.Left(v.value0)));
            };
            if (v1 instanceof Data_Maybe.Just) {
                return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Either.Right.create(new Data_Either.Right(v1.value0)));
            };
            throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 247, column 7 - line 249, column 41: " + [ v1.constructor.name ]);
        });
    };
    throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 243, column 3 - line 249, column 41: " + [ v.constructor.name ]);
});
var setCurrentUserName = function (userNameStr) {
    return function __do() {
        var v = Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffEff)(checkAndInit)();
        if (v instanceof Data_Either.Left) {
            return new Data_Either.Left(v.value0);
        };
        if (v instanceof Data_Either.Right) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.Right.create)($foreign.setNameImpl(userNameStr))();
        };
        throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 254, column 3 - line 256, column 51: " + [ v.constructor.name ]);
    };
};
var changeDebtor = function (newDebtor) {
    return function (v) {
        return {
            friend: newDebtor, 
            debt: v.debt
        };
    };
};
var currentUserSentPendings = function (friendList) {
    return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(currentUser))(function (v) {
        if (v instanceof Data_Either.Left) {
            return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Either.Left(v.value0));
        };
        if (v instanceof Data_Either.Right) {
            return Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Either.Right.create)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Aff.applicativeAff)(function (f) {
                return Data_Functor.map(Control_Monad_Aff.functorAff)(function ($156) {
                    return flipDebt(changeDebtor(f)($156));
                })(getDebtOrPending($foreign.friendPendingImpl)(f)(v.value0));
            })(friendList));
        };
        throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 196, column 3 - line 199, column 109: " + [ v.constructor.name ]);
    });
};
var cancelPending = function (v) {
    return function __do() {
        var v1 = checkAndInit();
        if (v1 instanceof Data_Either.Left) {
            return new Data_Either.Left(v1.value0);
        };
        if (v1 instanceof Data_Either.Right) {
            $foreign.cancelPendingImpl(v)();
            return new Data_Either.Right(Data_Unit.unit);
        };
        throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 220, column 3 - line 224, column 24: " + [ v1.constructor.name ]);
    };
};
var blankFriendDebt = {
    friend: "0x0", 
    debt: 0.0
};
var amount = function (v) {
    return v;
};
var confirmPending = function (v) {
    return function __do() {
        var v1 = currentUser();
        if (v1 instanceof Data_Either.Right) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.Right.create)($foreign.confirmPendingImpl(getUa(v.friend))(amount(v.debt)))();
        };
        if (v1 instanceof Data_Either.Left) {
            return new Data_Either.Left(v1.value0);
        };
        throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 212, column 3 - line 215, column 36: " + [ v1.constructor.name ]);
    };
};
var newPending = function (v) {
    return function __do() {
        var v1 = currentUser();
        if (v1 instanceof Data_Either.Right) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.Right.create)($foreign.newPendingImpl(getUa(v.friend))(amount(v.debt)))();
        };
        if (v1 instanceof Data_Either.Left) {
            return new Data_Either.Left(v1.value0);
        };
        throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 204, column 3 - line 207, column 36: " + [ v1.constructor.name ]);
    };
};
var posNegZero = function (v) {
    if (amount(v.debt) > 0.0) {
        return Positive.value;
    };
    if (amount(v.debt) < 0.0) {
        return Negative.value;
    };
    if (Data_Boolean.otherwise) {
        return Zero.value;
    };
    throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 109, column 1 - line 111, column 57: " + [ v.constructor.name ]);
};
var allNames = function (friendList) {
    var insertMap = function (map) {
        return function (address) {
            return function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return map;
                };
                if (v instanceof Data_Maybe.Just) {
                    return Data_Map.insert(ordUserAddress)(address)(v.value0)(map);
                };
                throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 267, column 9 - line 267, column 72: " + [ map.constructor.name, address.constructor.name, v.constructor.name ]);
            };
        };
    };
    var f = function (v) {
        return function (map) {
            return insertMap(map)(v.value0)(v.value1);
        };
    };
    return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(currentUser))(function (v) {
        if (v instanceof Data_Either.Left) {
            return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Either.Left(v.value0));
        };
        if (v instanceof Data_Either.Right) {
            var allUsers = Data_Semigroup.append(Data_Semigroup.semigroupArray)(friendList)([ v.value0 ]);
            return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Aff.applicativeAff)(getName)(allUsers))(function (v1) {
                return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Functor.map(Data_Functor.functorFn)(Data_Either.Right.create)(Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(Data_Map.empty))(Data_Array.zip(allUsers)(v1)));
            });
        };
        throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 261, column 3 - line 266, column 62: " + [ v.constructor.name ]);
    });
};
var allDebtOrPending = function (lookupFn) {
    return function (debtor) {
        return function (creditors) {
            return Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Aff.applicativeAff)(getDebtOrPending(lookupFn)(debtor))(creditors);
        };
    };
};
var currentUserDebts = function (friendList) {
    return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(currentUser))(function (v) {
        if (v instanceof Data_Either.Left) {
            return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Either.Left(v.value0));
        };
        if (v instanceof Data_Either.Right) {
            return Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Either.Right.create)(allDebtOrPending($foreign.friendDebtImpl)(v.value0)(friendList));
        };
        throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 182, column 3 - line 184, column 76: " + [ v.constructor.name ]);
    });
};
var currentUserPending = function (friendList) {
    return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(currentUser))(function (v) {
        if (v instanceof Data_Either.Right) {
            return Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Either.Right.create)(allDebtOrPending($foreign.friendPendingImpl)(v.value0)(friendList));
        };
        if (v instanceof Data_Either.Left) {
            return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Either.Left(v.value0));
        };
        throw new Error("Failed pattern match at Network.Eth.FriendInDebt line 189, column 3 - line 191, column 36: " + [ v.constructor.name ]);
    });
};
var addDebt = function (fd) {
    return function (money) {
        return setDebt(fd)(amount(getDebt(fd)) + amount(money));
    };
};
var absMoney = function (v) {
    return Money($$Math.abs(v));
};
module.exports = {
    Positive: Positive, 
    Negative: Negative, 
    Zero: Zero, 
    NoMetamask: NoMetamask, 
    FriendDebt: FriendDebt, 
    Money: Money, 
    UserAddress: UserAddress, 
    absMoney: absMoney, 
    addDebt: addDebt, 
    allNames: allNames, 
    amount: amount, 
    blankFriendDebt: blankFriendDebt, 
    cancelPending: cancelPending, 
    confirmPending: confirmPending, 
    createFriendship: createFriendship, 
    currentUser: currentUser, 
    currentUserDebts: currentUserDebts, 
    currentUserFriends: currentUserFriends, 
    currentUserPending: currentUserPending, 
    currentUserSentPendings: currentUserSentPendings, 
    flipDebt: flipDebt, 
    friendDebtZero: friendDebtZero, 
    getCurrentUserName: getCurrentUserName, 
    getDebt: getDebt, 
    getFriendAddr: getFriendAddr, 
    getName: getName, 
    getUa: getUa, 
    newDebt: newDebt, 
    newPending: newPending, 
    posNegZero: posNegZero, 
    setCurrentUserName: setCurrentUserName, 
    setDebt: setDebt, 
    showError: showError, 
    showMoney: showMoney, 
    eqMoney: eqMoney, 
    ordMoney: ordMoney, 
    showFriendDebt: showFriendDebt, 
    eqFriendDebt: eqFriendDebt, 
    showUserAddress: showUserAddress, 
    eqUserAddress: eqUserAddress, 
    ordUserAddress: ordUserAddress
};
